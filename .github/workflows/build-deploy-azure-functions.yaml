name: "[BUILD & DEPLOY] Build and Deploy Azure Functions"
run-name: "BUILD Azure Functions and DEPLOY to Instance"
on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        required: true
        type: choice
        description: "Environment"
        options:
          - develop
          - uat
          - production

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Install and Copy Runtime Dependencies
        run: |
          yarn --immutable --immutable-cache --mode=skip-build --production
          mkdir TEMP_FUNCTIONS_OUTPUT
          ls -al
          if [[ -d node_modules ]]; then
            cp -r node_modules TEMP_FUNCTIONS_OUTPUT
          fi
          cp package.json TEMP_FUNCTIONS_OUTPUT/package.json
          cp host.json TEMP_FUNCTIONS_OUTPUT/host.json
          cp yarn.lock TEMP_FUNCTIONS_OUTPUT/yarn.lock

      - name: Install Build Dependencies
        run: yarn --immutable --immutable-cache --mode=skip-build

      - name: Build Azure Functions
        run: |
          yarn build
          cp -r dist TEMP_FUNCTIONS_OUTPUT

      - name: Get package.json version
        id: version
        run: |
          name=$(cat package.json | jq -r .name)
          version=$(cat package.json | jq -r .version)
          echo "NAME=$name" >> "$GITHUB_OUTPUT"
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "PACKAGE=$name@$version" >> "$GITHUB_OUTPUT"

      - name: Zip Dist files
        working-directory: TEMP_FUNCTIONS_OUTPUT
        run: zip -q -D -X -y -r az-function-dist.zip *

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.version.outputs.PACKAGE }}"
          path: TEMP_FUNCTIONS_OUTPUT/az-function-dist.zip
          if-no-files-found: error
          retention-days: 1

  deploy:
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Get package.json version
        id: version
        run: |
          name=$(cat package.json | jq -r .name)
          version=$(cat package.json | jq -r .version)
          echo "NAME=$name" >> "$GITHUB_OUTPUT"
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "PACKAGE=$name@$version" >> "$GITHUB_OUTPUT"

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: "${{ steps.version.outputs.PACKAGE }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ vars[format('{0}_AZ_CLIENT_ID', inputs.ENVIRONMENT)] }}
          tenant-id: ${{ vars[format('{0}_AZ_TENANT_ID', inputs.ENVIRONMENT)] }}
          subscription-id: ${{ vars[format('{0}_AZ_SUBSCRIPTION_ID', inputs.ENVIRONMENT)] }}

      - name: Get Azure Terraform Output
        id: tfAzure
        uses: zingdevlimited/actions-helpers/azure/terraform-output@v3
        with:
          AZ_CLIENT_ID: ${{ vars[format('{0}_AZ_CLIENT_ID', inputs.ENVIRONMENT)] }}
          AZ_TENANT_ID: ${{ vars[format('{0}_AZ_TENANT_ID', inputs.ENVIRONMENT)] }}
          AZ_SUBSCRIPTION_ID: ${{ vars[format('{0}_AZ_SUBSCRIPTION_ID', inputs.ENVIRONMENT)] }}
          STORAGE_ACCOUNT_RESOURCEGROUP: ${{ vars[format('{0}_RESOURCE_GROUP', inputs.ENVIRONMENT)] }}
          STORAGE_ACCOUNT_NAME: ${{ vars[format('{0}_STORAGE_ACCOUNT_NAME', inputs.ENVIRONMENT)] }}
          STORAGE_ACCOUNT_CONTAINER: ${{ vars[format('{0}_STORAGE_ACCOUNT_CONTAINER', inputs.ENVIRONMENT)] }}
          STORAGE_BLOB_NAME: ${{ format('ussmtk-{0}.tfstate', inputs.ENVIRONMENT) }}
          TERRAFORM_DIRECTORY: ./terraform

      - name: Generate AppSettings JSON
        id: appsettings
        run: |
          result=$(cat appsettings-definition.json | envsubst)
          echo "$result"
          echo "$result" > appsettings-definition.json
        env:
          TWILIO_ACCOUNT_SID: ${{ vars[format('{0}_TWILIO_ACCOUNT_SID', inputs.ENVIRONMENT)] }}
          TWILIO_API_KEY: ${{ vars[format('{0}_TWILIO_API_KEY', inputs.ENVIRONMENT)] }}
          VAULT_NAME: ${{ fromJSON(steps.tfAzure.outputs.TERRAFORM_OUTPUTS).KEYVAULT_NAME.value }}
          USE_TEST_PHONE_NUMBER: ${{ vars[format('{0}_USE_TEST_PHONE_NUMBER', inputs.ENVIRONMENT)] }}
          TEST_PHONE_NUMBER: ${{ vars[format('{0}_TEST_PHONE_NUMBER', inputs.ENVIRONMENT)] }}
          E_GALAXY_URL: ${{ vars[format('{0}_E_GALAXY_URL', inputs.ENVIRONMENT)] }}
          MESSAGING_SERVICE_SID: ${{ vars[format('{0}_MESSAGING_SERVICE_SID', inputs.ENVIRONMENT)] }}
          OPENING_HOUR: ${{ vars[format('{0}_OPENING_HOUR', inputs.ENVIRONMENT)] }}
          CLOSING_HOUR: ${{ vars[format('{0}_CLOSING_HOUR', inputs.ENVIRONMENT)] }}
          
      - name: Deploy To Azure
        run: |
          az functionapp stop -g "$RESOURCE_GROUP" -n "$AZURE_FUNC_NAME"

          az functionapp config appsettings set -g "$RESOURCE_GROUP" -n "$AZURE_FUNC_NAME" --settings "@appsettings-definition.json"

          az functionapp deployment source config-zip -g "$RESOURCE_GROUP" -n "$AZURE_FUNC_NAME" --src az-function-dist.zip

          az functionapp start -g "$RESOURCE_GROUP" -n "$AZURE_FUNC_NAME"
        env:
          RESOURCE_GROUP: ${{ fromJSON(steps.tfAzure.outputs.TERRAFORM_OUTPUTS).RESOURCE_GROUP_NAME.value }}
          AZURE_FUNC_NAME: ${{ fromJSON(steps.tfAzure.outputs.TERRAFORM_OUTPUTS).AZURE_FUNCTIONS_NAME.value }}

      - name: Delete Zip file
        run: rm az-function-dist.zip
